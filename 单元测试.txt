单元测试
最小可测单元
特定条件下，特点函数
开发者编写
证明与期望一致



方法级测试
针对单独小方法
输入参数与出参是否符合预期
不测数据库，依赖调用，网络链接。


测试流程
自顶向下
接口->实现了->原子类->DAO


自低向上
DAO->原子类->接口
框架级代码->工具类代码->原子类代码->接口类代码

测试左移
减少缺陷修复成本
加速修复流程


白盒测试技术

语句覆盖        
判断覆盖
条件覆盖
判定条件覆盖
组合覆盖
路径覆盖
自上倒下强度加强工作量增加



语句覆盖：
每条语句至少被执行一次
判断覆盖：
每个判定至少一次真一次假
条件覆盖：
使得判定中的每个条件各获得各种可能的
结果
判定条件覆盖：
同时满足条件和判断覆盖
组合覆盖：
所有可能组合至少出现一次
路径覆盖：
覆盖程序中所有可能路径

分布场景
语句覆盖 50%
大部分场景

判定，条件，判定条件覆盖 30%
价值高场景

组合，路径覆盖 20%
底层框架，算法



单元测试要求
1.全自动非交互
2.独立性
3.重复性，不受外部环境影响
4.粒度足够小
5.核心代码确保通过
6.测试目录src/test/java
7.语句覆盖80% 核心100%
8.不可测代码需要重构
9.最好覆盖所有测试用例
10.发布后不补充测试用例



测试框架 Junit4
常用注解
@Before
@After
@Test
@Ignore
@BeforeClass
@AfterClass


顺序
@BeforeClass
@Before
@Test
@After
@AfterClass


数据准备类型
正常数据
边界数据
异常数据

设计用例
1为系统运行起来设计
环境可用
2为正向测试
验证功能
3为逆向测试
异常处理
4.为代码覆盖
组合案例
5.为非功能质量要求
性能，安全等


mock
1.解除测试对象对外部服务的依赖
2.替换外部服务调用，提升测试用例速度
3.减少工作量提升效率



mock:虚对象？

mock框架
EasyMock
Mockito
PowerMock
Jmlckit


常见出现场景
不易构造的复杂对象
接口
静态方法
Dao层方法
私有方法

覆盖率报告
Element 元素
Missed Instruction 指令覆盖
Missed Branches cov 分支覆盖
Missed City 圈复杂度
Missed Methods 方法
Missed Classes 类
Missed Lines 代码行












